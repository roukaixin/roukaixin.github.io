[{"categories":["linux"],"content":"1、yazi 终端文件管理器和 ranger 一样 官方文档地址：https://yazi-rs.github.io/ 1.1、安装 sudo pacman -S yazi ffmpegthumbnailer unarchiver jq poppler fd ripgrep fzf zoxide 1.2、配置 参考地址：https://yazi-rs.github.io/docs/tips 1.2.1、全边框 在 https://github.com/sxyazi/yazi/blob/main/yazi-plugin/preset/components/manager.lua 文件中 Manager:render 函数复制到 ~/.config/yazi/init.lua 中，并打入下面补丁 @@ -10,16 +10,28 @@ }) :split(area) + local bar = function(c, x, y) + x, y = math.max(0, x), math.max(0, y) + return ui.Bar(ui.Rect { x = x, y = y, w = ya.clamp(0, area.w - x, 1), h = math.min(1, area.h) }, ui.Bar.TOP) + :symbol(c) + end + return ya.flat { -- Borders - ui.Bar(chunks[1], ui.Bar.RIGHT):symbol(THEME.manager.border_symbol):style(THEME.manager.border_style), - ui.Bar(chunks[3], ui.Bar.LEFT):symbol(THEME.manager.border_symbol):style(THEME.manager.border_style), + ui.Border(area, ui.Border.ALL):type(ui.Border.ROUNDED), + ui.Bar(chunks[1], ui.Bar.RIGHT), + ui.Bar(chunks[3], ui.Bar.LEFT), + bar(\"┬\", chunks[1].right - 1, chunks[1].y), + bar(\"┴\", chunks[1].right - 1, chunks[1].bottom - 1), + bar(\"┬\", chunks[2].right, chunks[2].y), + bar(\"┴\", chunks[2].right, chunks[1].bottom - 1), + -- Parent - Parent:render(chunks[1]:padding(ui.Padding.x(1))), + Parent:render(chunks[1]:padding(ui.Padding.xy(1))), -- Current - Current:render(chunks[2]), + Current:render(chunks[2]:padding(ui.Padding.y(1))), -- Preview - Preview:render(chunks[3]:padding(ui.Padding.x(1))), + Preview:render(chunks[3]:padding(ui.Padding.xy(1))), } end 1.2.2、软链接符号 在 https://github.com/sxyazi/yazi/blob/main/yazi-plugin/preset/components/status.lua 文件中复制 Status:name 函数添加到 ~/.config/yazi/init.lua 中，并打入下面补丁 @@ -42,7 +42,11 @@ function Status:name() return ui.Span(\"\") end - return ui.Span(\" \" .. h.name) + local linked = \"\" + if h.link_to ~= nil then + linked = \" -\u003e \" .. tostring(h.link_to) + end + return ui.Span(\" \" .. h.name .. linked) end 1.2.3、显示用户和用户组 在 https://github.com/sxyazi/yazi/blob/main/yazi-plugin/preset/components/status.lua 文件中复制 Status:render 函数添加到 ~/.config/yazi/init.lua 中，并打入下面补丁 @@ -1,8 +1,22 @@ +function Status:owner() + local h = cx.active.current.hovered + if h == nil or ya.target_family() ~= \"unix\" then + return ui.Line {} + end + + return ui.Line { + ui.Span(ya.user_name(h.cha.uid) or tostring(h.cha.uid)):fg(\"magenta\"), + ui.Span(\":\"), + ui.Span(ya.group_name(h.cha.gid) or tostring(h.cha.gid)):fg(\"magenta\"), + ui.Span(\" \"), + } +end + function Status:render(area) self.area = area local left = ui.Line { self:mode(), self:size(), self:name() } - local right = ui.Line { self:permissions(), self:percentage(), self:position() } + local right = ui.Line { self:owner(), self:permissions(), self:percentage(), self:position() } local progress = self:progress(area, right:width()) return { ui.Paragraph(area, { left }), 显示用户名和主机名 在 https://github.com/sxyazi/yazi/blob/main/yazi-plugin/preset/components/header.lua 文件中复制 Header:render 函数添加到 ~/.config/yazi/init.lua 中，并打入下面补丁 @@ -1,3 +1,10 @@ +function Header:host() + if ya.target_family() ~= \"unix\" then + return ui.Line {} + end + return ui.Span(ya.user_name() .. \"@\" .. ya.host_name() .. \":\"):fg(\"blue\") +end + function Header:render(area) self.area = area @@ -6,7 +13,7 @@ :constraints({ ui.Constraint.Percentage(50), ui.Constraint.Percentage(50) }) :split(area) - local left = ui.Line { self:cwd() } + local left = ui.Line { self:host(), self:cwd() } local right = ui.Line { self:tabs() } return { ui.Paragraph(chunks[1], { left }), 1.2.4、文件不现实软链接 在 ~/.config/yazi/init.lua 中加入下面函数 function Folder:highlighted_name(file) -- Complete prefix when searching across directories local prefix = file:prefix() or \"\" if prefix ~= \"\" then prefix = prefix .. \"/\" end -- Range highlighting for filenames local highlights = file:highlights() local spans = self:highlight_ranges(prefix .. file.name, highlights) -- Show symlink target if MANAGER.show_symlink and file.link_to ~= nil then spans[#spans + 1] = ui.Span(\"\"):italic() end if highlights == nil or not file:is_hovered() then return sp","date":"2024年01月29日 23:00:00","objectID":"/posts/arch/arch-software-yazi/:0:0","tags":["linux","arch"],"title":"arch 基础安装到日常使用与美化 - yazi","uri":"/posts/arch/arch-software-yazi/"},{"categories":["linux"],"content":"1、安装 NVIDIA 驱动 安装驱动 安装启动之前，先跟新一下 pacman 数据库。更新命令：sudo pacman -Syyu # 安装 linux-lts-headers，因为显卡启动需要。 # 注意：如果内核是 linux ，不是 linux-lts，那么安装的是 linux-headers sudo pacman -S linux-lts-headers # 安装 nvidia 启动，推荐安装 nvidia-dkms ，他是动态安装的。不像其他驱动，如果内核升级，就需要重新安装一次驱动。 sudo pacman -S nvidia-dkms DRM 内核模式设置 这一步可以解决屏幕撕裂问题 # 编辑修改 /etc/default/grub vim /etc/default/grub # 找到 GRUB_CMDLINE_LINUX_DEFAULT 这一项在后面加入 nvidia-drm.modeset=1 编辑完成之后，重新生成 grub.cfg ，执行 sudo grub-mkconfig -o /boot/grub/grub.cfg 添加 initramfs 模块 在 /etc/mkinitcpio.conf 中找到 MODULES= 这一行在括号的后面加入nvidia nvidia_modeset nvidia_uvm nvidia_drm。修改之前先备份一下（sudo cp /etc/mkinitcpio.conf /etc/mkinitcpio.conf.back） 重新生成 initramfs # 输入 sudo mkinitcpio -P 命令生成 initramfs sudo mkinitcpio -P 重要：执行完命令之后重启电脑（一定要重启） 校验是否安装成功 打开终端，输入 nvidia-smi 命令，出现 NVIDIA-SMI has failed because it couldn't communicate with the NIVIDIA driver. Make sure that the latest NVIDIA driver is installed and running ，那就说明没有安装成功。 解决方案：重启电脑，如果重启电脑还是不行，看看上面修改的配置有没有对，如果还是不行在安装一遍 1.1、仅使用 NVIDIA 显卡 下面配置针对于 x 服务器，并使用桌面环境（dwm） 创建 xorg.conf（10-nvidia-drm-outputclass.conf） 在 /etc/X11/xorg.conf.d/ 目录下新建 10-nvidia-drm-outputclass.conf。 重要：如果/etc/X11存在xorg.conf，那么一定要删除掉 在/usr/share/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf也有一份是生成的，可以参考着来看 vim /etc/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf Section \"OutputClass\" Identifier \"intel\" MatchDriver \"i915\" Driver \"modesetting\" EndSection Section \"OutputClass\" Identifier \"nvidia\" MatchDriver \"nvidia-drm\" Driver \"nvidia\" Option \"AllowEmptyInitialConfiguration\" Option \"PrimaryGPU\" \"yes\" ModulePath \"/usr/lib/nvidia/xorg\" ModulePath \"/usr/lib/xorg/modules\" EndSection 注意： 这里的 intel 驱动 必须为 modesetting，否则会产生严重的撕裂，后面的 AllowEmptyInitialConfiguration 是为了让 n 卡在没检测到显示器的时候继续运行，而不是默认的退出。 使用 startx 启动 这里以dwm为例，如果你是其他桌面管理器，请参阅这里。如果不配置你将会获得黑屏。 接下来，将以下两行添加到您的开头：~/.xinitrc # 编辑 .xinitrc 并在文件开头添加下面内容 vim ~/.xinitrc xrandr --setprovideroutputsource modesetting NVIDIA-0 xrandr --auto 如果启动之后 dpi 设置不正确，那么还需要在 xrandr --auto 下面一行加入 xrandr --dpi 96 安装 NVIDIA 软件包 （可选） sudo pacman -S nvidia-settings nvidia-utils 检查3D 检查是否正常使用 N 卡来输出。建议检查一下 # 安装包 sudo pacman -S mesa-utils # 检查是否输出,出现下面内容就是成功了 glxinfo | grep NVIDIA 1.1.1、配置视频硬解 # 安装 翻译层 paru -S libva-nvidia-driver 配置 方法一： # 创建 .xprofile 文件 vim ~/.xprofile export LIBVA_DRIVER_NAME=nvidia export LIBVA_DRIVERS_PATH=/usr/lib/dri/ export VDPAU_DRIVER=nvidia # 修改 .xinitrc 文件 [ -f ~/.xprofile ] \u0026\u0026 . ~/.xprofile 方法二： # 修改 .xinitrc 文件 export LIBVA_DRIVER_NAME=nvidia export LIBVA_DRIVERS_PATH=/usr/lib/dri/ export VDPAU_DRIVER=nvidia 注意：一定要在 exec dwm 之前 验证 VA-API # 安装软件包，如果不安装这个包，那么 vainfo 无法使用 sudo pacman -S libva-utils 验证 VA-API 是否正常工作，运行 vainfo，出现下面内容就表示成功 验证VDPAU # 安装 vdpauinfo，不安装无法使用 vdpauinfo 命令 sudo pacman -S vdpauinfo 验证 VDPAU 是否正常工作，运行vdpauinfo，出现下图就表示成功 2、声卡驱动 sudo pacman -S pipewire sudo pacman -S lib32-pipewire sudo pacman -S pipewire-pulse sudo pacman -S pavucontrol 3、蓝牙驱动 sudo pacman -S bluez bluez-utils blueman 启动蓝牙 systemctl start bluetooth.service 参考教程：https://cn.linux-console.net/?p=16637 4、电源管理 安装 ： sudo pacman -S tlp 启动 systemctl start tlp.service systemctl enable tlp.service systemctl mask systemd-rfkill.service systemctl mask systemd-rfkill.socket 参考教程：https://wiki.archlinux.org/title/TLP GUI 安装 ： paru -S tlpui ","date":"2023年11月14日 21:00:00","objectID":"/posts/arch/arch-drive-install/:0:0","tags":["linux","arch"],"title":"arch 基础安装到日常使用与美化 - 驱动安装","uri":"/posts/arch/arch-drive-install/"},{"categories":["linux"],"content":"1、配置中国源和开启32位软件包 配置中国镜像源 # 编辑 /etc/pacman.d/mirrorlist，如果在安装系统时，关闭了 reflector 服务和配置了 mirrorlist，那么这个可以不用改，为了保险起见，还是需要看一下和安装的时候有没有区别。 vim /etc/pacman.d/mirrorlist # 在头部添加中科大源 Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch 提醒 还可以添加其他源，例如：清华源(Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch)，阿里云（Server = https://mirrors.aliyun.com/archlinux/$repo/os/$arch） 开启32位软件包 # 编辑 /etc/pacman.conf vim /etc/pacman.conf # 下面两行内容取消掉 # 号 [multilib] Include = /etc/pacman.d/mirrorlist 添加 aur 源 # 在最后面添加 [archlinuxcn] Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch 提醒 其他 aur 源。清华源（Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch）， 阿里云源（Server = https://mirrors.aliyun.com/archlinuxcn/$arch） 必须执行以下命令以添加密钥签名 # 更新软件包缓存 pacman -Syy # 安装 GPG key pacman -S archlinuxcn-keyring 2、添加一个普通用户 #新建用户名arch 可自行更改用户名 useradd -m -G wheel -s /bin/bash arch #设置arch用户名的密码 passwd arch #编辑arch用户的权限 EDITOR=vim visudo 找到 # %wheel ALL=(ALL:ALL)ALL 并把 # 号去掉 提醒 我自己个人是注释掉 %wheel ALL=(ALL:ALL)ALL 这一行，方便之后使用 sudo 时不需要输入密码。 如果不想使用 sudo 命令时输入密码，可以注释掉 %wheel ALL=(ALL:ALL) NOPASSWD: ALL。两个选择一个注释掉既可以了 3、安装软件源（AUR） # 可以选择两个都安装，也可以只安装一个 pacman -S yay paru 4、安装字体 # ttf-dejavu : 英文字体 # wqy-zenhei : 文泉驿正黑矢量字体 # wqy-microhei : 文泉驿-微米黑 # noto-fonts-emoji : Emoji 字体 # ttf-jetbrains-mono-nerd : pacman -S ttf-dejavu wqy-zenhei wqy-microhei noto-fonts-emoji 5、安装中文输入法 安装 fcitx5 # fcitx5-im : 基础包和模块 # fcitx5-chinese-addons ：中文输入法引擎 # # 输入法模块 1、qt程序：fcitx5-qt 2、gtk程序 ： fcitx5-gtk pacman -S fcitx5-im fcitx5-chinese-addons 配置输入法 # 编辑 /etc/environment，加入下面内容 vim /etc/environment # 内容 GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx XMODIFIERS=@im=fcitx SDL_IM_MODULE=fcitx GLFW_IM_MODULE=ibus 安装词库 # fcitx5-pinyin-zhwiki : 中文维基百科创建的词库 pacman -S fcitx5-pinyin-zhwiki fcitx5-pinyin-moegirl 6、安装工具（可选） # udisk2 udiskie : 自动挂载U盘 # ntfs-3g ： 读取ntfs格式磁盘 # dolphin : 文件管理器 # thunar : 文件管理器 pacman -S udisks2 udiskie ntfs-3g dolphin # 开机自启自动挂载U盘 systemctl enable udisks2 提醒 systemctl enable udisks2 根据个人是否开启，如果不开启，可以在启动窗口管理器的时候在启动也行 ","date":"2023年11月12日 21:00:00","objectID":"/posts/arch/arch-config-install/:0:0","tags":["linux","arch"],"title":"arch 基础安装到日常使用与美化 - 安装后配置","uri":"/posts/arch/arch-config-install/"},{"categories":null,"content":"pankx's friends","date":"2023年10月12日 23:32:40","objectID":"/friends/","tags":null,"title":"个人收集的博客友情链接","uri":"/friends/"},{"categories":null,"content":" 注意 如需要添加友链信息，按照一下格式发生我邮箱 3427173515@qq.com或者在下面评论 - nickname: DebuggerX avatar: https://www.debuggerx.com/images/avatar.webp url: https://www.debuggerx.com/ description: DebuggerX's Note ","date":"2023年10月12日 23:32:40","objectID":"/friends/:0:0","tags":null,"title":"个人收集的博客友情链接","uri":"/friends/"},{"categories":["linux"],"content":"debian","date":"2023年09月12日 20:31:00","objectID":"/posts/debian-linux-%E5%AE%89%E8%A3%85/","tags":["linux","debian"],"title":"debian 安装","uri":"/posts/debian-linux-%E5%AE%89%E8%A3%85/"},{"categories":["linux"],"content":"1、下载镜像 官方下载地址 ：https://www.debian.org/download 其他地址下载地址可以从中科大源或清华源去下载 2、安装 制作启动 u 盘 启动电脑进入 u 盘 启动进入选择页面，选择可视化页面安装 选择语言 选择地区 选择 other -\u003e Asia -\u003e China 配置本地化 配置键盘（默认点击下一步即可） 配置主机名字 填写自己的主机名 配置域名（为空即可，就是什么都不要填） 设置 root 密码 填入自己的密码 添加普通用户 全名可以填写大写 用户名，这个是根据上一步获取的，不需要修改 设置普通用户的密码 分区磁盘 选择自定义分区 选择磁盘 创建一个分区 是否启动包管理 不启动，之后在修改配置文件 选择桌面环境 安装完成之后重启 ","date":"2023年09月12日 20:31:00","objectID":"/posts/debian-linux-%E5%AE%89%E8%A3%85/:0:0","tags":["linux","debian"],"title":"debian 安装","uri":"/posts/debian-linux-%E5%AE%89%E8%A3%85/"},{"categories":["idea"],"content":"1、Failed to retrieve application JMX service URL 报错 启动项目时候，消息中心中出现 Failed to retrieve application JMX service URL 错误信息。 解决方法: 把 C:\\Users\\{用户名}\\AppData\\Roaming\\JetBrains 文件夹删除，之后重启 idea 即可 注意: 如果没有看到上面的文件夹，请打开隐藏文件 如果上面方法还是不能成功，那么就需要在启动参数中加入 -Dcom.sun.management.jmxremote 2、fcitx5 在 idea 显示框位置不正确 高版本 idea 不需要设置，默认已经解决 解决方法： ctrl + shel + a 打开搜索 actions，搜索 choose boot java runtime for the ide 搜索后按下回车键打开它 选择第一个即可，b后面的数字越大版本越新 现在之后安装重新 idea 即可 3、启动速度优化 加入下面到 vm 配置中 -Xms128m -Xmx8192m -XX:ReservedCodeCacheSize=1024m -XX:+UseG1GC -XX:SoftRefLRUPolicyMSPerMB=50 -XX:CICompilerCount=2 -XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow 参考 ： https://blog.csdn.net/m0_58022371/article/details/136951465 ","date":"2023年08月28日 20:43:46","objectID":"/posts/idea-%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/:0:0","tags":["idea"],"title":"idea 使用过程的问题","uri":"/posts/idea-%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"},{"categories":["对象存储服务器"],"content":"1、集群部署 需要四个节点也就是四个服务器。 四个硬盘（可以是假的，不过单独的硬盘对于恢复数据是比较好的）。 docker compose 文件 version: \"3.8\" services: minio: image: minio/minio:RELEASE.2023-07-21T21-12-44Z environment: - \"MINIO_ROOT_USER=roukaixin\" - \"MINIO_ROOT_PASSWORD=roukaixin\" ports: - \"9000:9000\" - \"9090:9090\" volumes: - ./data/disk1/minio:/data/disk1/minio - ./data/disk2/minio:/data/disk2/minio - ./data/disk3/minio:/data/disk3/minio - ./data/disk4/minio:/data/disk4/minio command: - \"server\" - \"http://minio{1...4}:9000/data/disk{1...4}/minio\" - \"--console-address\" - \":9090\" extra_hosts: - \"minio1:10.1.1.1\" - \"minio2:10.1.1.2\" - \"minio3:10.1.1.3\" - \"minio4:10.1.1.4\" network_mode: \"host\" 注意： minio 版本需要一致 {1…4} 表示的是一到四个节点。一到四之间是三个点。 extra_hosts 表示在容器主机内中的 /etc/hosts 文件中添加。 一定需要使用 host 网络模式，如果不是 host 网络，那么启动就会报 Unable to read 'format.json' 错误 ","date":"2023年08月12日 11:25:46","objectID":"/posts/minio-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/:0:0","tags":["minio","对象存储服务器"],"title":"minio 集群搭建","uri":"/posts/minio-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"},{"categories":["linux"],"content":"fedora","date":"2023年07月14日 19:13:00","objectID":"/posts/fedora-linux/","tags":["linux","fedora"],"title":"fedora-Linux 安装","uri":"/posts/fedora-linux/"},{"categories":["linux"],"content":"1、安装 下载iso 镜像 下载地址：https://mirrors.tuna.tsinghua.edu.cn/ 下载带有 Everything 的镜像文件，这个镜像文件可以自定义安装。 安装 创建启动u盘，可视化安装教程。这里我安装的是最小化安装，因为我使用的是dwm窗口管理器 2、安装配置 2.1、替换为国内源 sudo sed -e 's|^metalink=|#metalink=|g' \\ -e 's|^#baseurl=http://download.example/pub/fedora/linux|baseurl=https://mirrors.tuna.tsinghua.edu.cn/fedora|g' \\ -i.bak \\ /etc/yum.repos.d/fedora.repo \\ /etc/yum.repos.d/fedora-modular.repo \\ /etc/yum.repos.d/fedora-updates.repo \\ /etc/yum.repos.d/fedora-updates-modular.repo # 更新本地缓存 sudo dnf makecache # 更新软件 sudo dnf -y update 2.2、创建一个普通用户 #新建用户名arch 可自行更改用户名 useradd -m -G wheel -s /bin/bash arch #设置arch用户名的密码 passwd arch #编辑arch用户的权限 EDITOR=vim visudo 找到 # %wheel ALL=(ALL:ALL)ALL 并把 # 号去掉 个人是注释掉 %wheel ALL=(ALL:ALL)ALL 这一行，如果不想使用 sudo 命令时输入密码，可以注释掉 %wheel ALL=(ALL:ALL) NOPASSWD: ALL。两个选择一个注释掉既可以了 2.3、配置窗口管理器 xorg 服务器 # 安装依赖包 sudo dnf install xorg-x11-server-devel xorg-x11-xinit xorg-x11-server-Xorg # 可选 xorg-x11-server-Xvfb xorg-x11-xauth xorg-x11-server-Xvfb xorg-x11-server-Xdmx xorg-x11-server-Xephyr xorg-x11-server-Xnest 在家目录下新建 .xinitrc 文件，并加入下面内容 #!/bin/bash exec dwm dwm # 安装依赖包 sudo dnf install cmake gcc libX11-devel libXft-devel libXinerama-devel git # 克隆 dwm cd ~ \u0026\u0026 mkdir wm git clone https://github.com/roukaixin/yaocccc-dwm # 编译 sudo make clean install 编译过程中，可能会缺失一些同文件，可以使用 dnf provides */头文件名 来查找在哪一个包 st # 克隆 st git clone https://gitee.com/rouxin/st # 编译 sudo make clean install picom # 安装依赖包 sudo dnf install meson libev-devel xcb-util-renderutil-devel xcb-util-image-devel pixman-devel xcb-util-devel uthash-devel libconfig-devel mesa-libGL-devel dbus-devel # 克隆pciom git clone https://github.com/FT-Labs/picom # 编译 cd picom git submodule update --init --recursive meson setup --buildtype=release . build ninja -C build ninja -C build install 其他工具包 sudo dnf install network-manager-applet flameshot dunst feh neofetch neovim acpi xsetroot 安装字体 下载地址：https://github.com/ryanoasis/nerd-fonts/releases/ 下载需要的字体，本人使用 dwm 的字体为：JetBrainsMono.zip，下载地址为：https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip # 创建目录 sudo mkdir /usr/share/fonts/JetBrainsMono/ # 复制文件到 /usr/share/fonts/JetBrainsMono/ 目录下 cp JetBrainsMono.tar.xz /usr/share/fonts/JetBrainsMono/ # 解压，如果没有 unzip 命令，使用 sudo dnf install unzip 安装 cd /usr/share/fonts/JetBrainsMono/ \u0026\u0026 sudo unzip JetBrainsMono.zip # 删除 sudo rm -rf JetBrainsMono.zip 2.4、安装n卡驱动 安装成功系统后，引导的时候需要开启第三方软件库 sudo dnf install akmod-nvidia 2.5、安装docker # 卸载之前安装的docker sudo dnf remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-selinux \\ docker-engine-selinux \\ docker-engine # 安装存储库 sudo dnf -y install dnf-plugins-core sudo dnf config-manager \\ --add-repo \\ https://download.docker.com/linux/fedora/docker-ce.repo sudo sed -i 's+https://download.docker.com+https://mirrors.tuna.tsinghua.edu.cn/docker-ce+' /etc/yum.repos.d/docker-ce.repo # 安装 docker 引擎 sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 2.6、安装typora # 这个可能用不了了 sudo dnf config-manager --add-repo https://typora.io/linux/Typora-fedora.repo sudo dnf install typora sudo dnf install flatpak flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo flatpak install flathub io.typora.Typora 2.7、安装浏览器 google chrome # 下载 wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm # 安装（推荐使用 dnf，会下载依赖库） sudo dnf install ./google-chrome-stable_current_x86_64.rpm edge # 导入GPG密钥 sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc # 添加存储库 sudo dnf config-manager --add-repo https://packages.microsoft.com/yumrepos/edge # 安装 sudo dnf install microsoft-edge-stable ","date":"2023年07月14日 19:13:00","objectID":"/posts/fedora-linux/:0:0","tags":["linux","fedora"],"title":"fedora-Linux 安装","uri":"/posts/fedora-linux/"},{"categories":["linux"],"content":"1、安装 镜像下载地址：https://get.opensuse.org/tumbleweed/#download 2、窗口管理器安装 2.1、创建一个普通用户 #新建用户名arch 可自行更改用户名 useradd -m -G wheel -s /bin/bash arch #设置arch用户名的密码 passwd arch #编辑arch用户的权限 EDITOR=vim visudo 找到 # %wheel ALL=(ALL:ALL)ALL 并把 # 号去掉 个人是注释掉 %wheel ALL=(ALL:ALL)ALL 这一行，如果不想使用 sudo 命令时输入密码，可以注释掉 %wheel ALL=(ALL:ALL) NOPASSWD: ALL。两个选择一个注释掉既可以了 2.2、安装 dwm 重启使用普通用户登录 # 安装 git sudo zypper install git # 创建 wm 并进入文件夹 mkdir wm \u0026\u0026 cd ~/wm # 克隆 dwm git clone https://github.com/roukaixin/yaocccc-dwm # 修改名字 mv yaocccc-dwm/ dwm cd dwm # 安装编译包 sudo zypper install cmake gcc libX11-devel libXft-devel libXinerama-devel # 编译 sudo make clean install 2.3、安装 st # 克隆 cd ~/wm \u0026\u0026 git clone https://gitee.com/rouxin/st \u0026\u0026 cd st # 修改 config.mk sudo zypper install neovim ncurses-devel nvim config.mk # 取消注释，并把 c99 改为 gcc # 编译 sudo make clean install 2.4、安装 picom # 克隆 cd ~/wm \u0026\u0026 git clone https://github.com/FT-Labs/picom # 安装包 sudo zypper install meson libev-devel xcb-util-renderutil-devel xcb-util-image-devel libpixman-1-0-devel xcb-util-devel uthash-devel libconfig-devel pcre2-devel Mesa-libGL-devel Mesa-libEGL-devel dbus-1-devel # 编译安装 cd picom git submodule update --init --recursive meson setup --buildtype=release . build ninja -C build install 2.5、安装字体 下载地址：https://github.com/ryanoasis/nerd-fonts/releases/ 下载需要的字体，本人使用 dwm 的字体为：JetBrainsMono.zip，下载地址为：https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip # 创建目录 sudo mkdir /usr/share/fonts/JetBrainsMono/ # 复制文件到 /usr/share/fonts/JetBrainsMono/ 目录下 cp JetBrainsMono.tar.xz /usr/share/fonts/JetBrainsMono/ # 解压，如果没有 unzip 命令，使用 sudo dnf install unzip 安装 cd /usr/share/fonts/JetBrainsMono/ \u0026\u0026 sudo unzip JetBrainsMono.zip # 删除 sudo rm -rf JetBrainsMono.zip 2.6、安装 xorg 服务器 sudo zypper install xorg-x11-server xinit # 创建配置文件 nvim .xinitrc #!/bin/bash exec dwm 2.7、其他依赖包 sudo zypper install NetworkManager-applet flameshot dunst feh neofetch acpi xsetroot rofi 3、配置 3.1、启动中文 # 在 ～/.xintrx 中加入 # 注意 ： 一定要加在 exec dwm 前 export LANG=zh_CN.UTF-8 export LANGUAGE=zh_CN:en_US 3.2、安装输入法 sudo zypper install fcitx5-devel fcitx5-chinese-addons-devel 配置输入法 # 编辑 /etc/environment，加入下面内容 vim /etc/environment # 内容 GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx XMODIFIERS=@im=fcitx SDL_IM_MODULE=fcitx GLFW_IM_MODULE=ibus 3.3、显示亮度 sudo zypper install brightnessctl 3.4、声卡驱动 sudo zypper install pipewire-pulseaudio pavucontrol 3.5、显卡驱动 ","date":"2023年07月12日 20:00:00","objectID":"/posts/open-suse/:0:0","tags":["linux","opensuse"],"title":"opensuse 安装和窗口管理器安装","uri":"/posts/open-suse/"},{"categories":["vim"],"content":"1、安装 github 地址：https://github.com/neovim/neovim 1.1、arch sudo pacman -S neovim ","date":"2023年07月01日 23:45:46","objectID":"/posts/neovim/:0:0","tags":["neovim","vim"],"title":"neovim","uri":"/posts/neovim/"},{"categories":["linux"],"content":"22、archlinux的基本安装 22.1、停止reflector服务 禁止自动更新服务器列表 systemctl stop reflector.service 22.2、检查电脑是否支持UEFI引导模式 ls /sys/firmware/efi/efivars # 提示：如果没有报错就是支持UEFI 22.3、连接网络 22.3.1、有线连接 直接插上网线就可以自动联网了 22.3.2、无线网络（wifi） # 是否启用了网络接口 ip link # 执行 iwctl 命令，进入交互式命令行 iwctl # 列出设备名，比如无线网卡看到叫 wlan0 device list # 用 wlan0 网卡扫描网络 station wlan0 scan # 列出网络 station wlan0 get-networks # 连接网络名字 输入密码 station wlan0 connect 无线网名字 # 成功后退出 exit或者quit 连接成功后ping一下百度是否有网 ping baidu.com 22.4、同步时间 # 同步网络时间 timedatectl set-ntp true # 提示：检查是否成功 看到（system clock synchronized :yes）这一句就是成功了 timedatectl status 22.5、修改软件源 打中国的源放在头部 vim /etc/pacman.d/mirrorlist 36 dd : 剪切36行 p : 粘贴 22.6、分区 22.6.1、fdisk分区 # 查看磁盘分区 lsblk # 分区 fdisk /dev/sda 22.6.2、cfdisk分区 cfdisk /dev/sda 现在使用 cfdisk 分区有主分区和扩展分区，如果超过4 个主分区，那么就需要在扩展分区上进行分区。 例子：2G扩展分区（1G的 /boot 分区，1G 的 /boot/efi 分区），16G主分区（swap 交换分区），500G主分区 （ /home 分区），482G主分区（ 根分区） 一般分区都有跟分区（/）、交换分区（swap）、引导分区（boot） 22.6.3、格式化分区 EFI 分区 两个选择其中一个 # mkfs.fat -F32 /dev/sda1 和 mkfs.vfat /dev/sda1 mkfs.vfat /dev/sda1 swap 分区 mkswap /dev/sda2 普通分区 # 使用 ext4 格式格式化 mkfs.ext4 /dev/sda3 # 使用 btrfs 格式进行格式化 mkfs.btrfs -f -L arch /dev/sda3 btrfs -f ：强制格式化为 btrfs 格式 -L ： 表示分区 label （可以自定义），可以理解为 win 下的磁盘名称。 22.7、挂载分区 根据自己的分区情况进行挂载分区（尽量不要把usr目录挂载出去，如果挂载出去是不能开机的（网上也有教程是可以挂载的，我没有试过）），一般挂载第三方应用安装目录（opt）、临时文件目录（tmp） 注意 必须先挂载根目录才能挂载其他目录 挂载根分区 btrfs 格式化挂载方法 # 先挂载 /dev/sda3 分区。注意： 这个分区是 btrfs 分区，也是我的根分区 mount -t btrfs -o compress=zstd /dev/sda3 /mnt # 创建两个子卷 btrfs subvolume create /mnt/@ btrfs subvolume create /mnt/@home # 查看创建的子卷，-p : 指定哪个分区 btrfs subvolume list -p /mnt # 卸载 /dev/sda3 分区 umount /mnt # 挂载根目录 mount -t btrfs -o subvol=/@,compress=zstd /dev/sda3 /mnt # 挂载 home 目录 mkdir /mnt/home mount -t btrfs -o subvol=/@home,compress=zstd /dev/sda3 /mnt/home # 挂载 EFI 分区 mkdir /mnt/boot mount /dev/sda1 /mnt/boot # 挂载 swapon 分区 swapon /dev/sda2 警告 快照工具 timeshift 只支持 /@ 这种子卷布局，如果采用不同的布局，thimeshift 可能会存在问题。 ext4 格式化挂载方法 # 挂载 mount /dev/sda3 /mnt swapon /dev/sda2 请用swap分区 mkdir /mnt/boot mount /dev/sda1 /mnt/boot 22.8、安装内核 # 往/mnt目录里安装系统 # 其中最基础的四个包是 base base-devel linux linux-firmware # linux-lts （lts:稳定版） # 如果内核安装了稳定版，那么独显也要是稳定版的，要不然就会发生问题（我也不知道什么问题） pacstrap /mnt base base-devel linux linux-firmware vim 22.9、配置系统 22.9.1、Fstab # 生成 fstab文件 (用 `-U` 或 `-L` 选项设置 UUID 或卷标) genfstab -U /mnt \u003e\u003e /mnt/etc/fstab 强烈建议 在执行完以上命令后，检查一下生成的 /mnt/etc/fstab 文件是否正确。 22.9.2、Chroot # chroot到新安装的系统 arch-chroot /mnt 22.9.3、设置时区 # ln -sf /usr/share/zoneinfo/Region（地区名）/City（城市名） /etc/localtime # 设置上海时区 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 将硬件时钟调整为与目前的系统时钟一致 hwclock --systohc 22.9.4、本地化 修改 local.gen 文件 程序和库如果需要本地化文本，都依赖区域设置，后者明确规定了地域、货币、时区日期的格式、字符排列方式和其他本地化标准。 需在这两个文件设置：locale.gen 与 locale.conf。 编辑 /etc/locale.gen，然后取消掉 en_US.UTF-8 UTF-8 和其他需要的 区域设置前的注释#。 接着执行 locale-gen 以生成 locale 信息： vim /etc/locale.gen # 更新locale locale-gen 创建 locale.conf 文件 创建 locale.conf 文件，并编辑设定 LANG 变量，比如： vim /etc/locale.conf LANG=en_US.UTF-8警告： 不推荐在此设置任何中文 locale，会导致 tty 乱码。 例子： en_US.UTF-8 UTF-8 zh_CN.UTF-8 UTF-8 zh_SG.UTF-8 UTF-8 22.9.5、网络配置 创建hostname文件 # 编辑 hostname，写入下面内容 vim /etc/hostname # 写入内容 arch（主机名） 创建hosts文件 # 编辑 hosts，写入下面内容 vim /etc/hosts # 写入内容 127.0.0.1 localhost ::1 localhost 22.9.6、Root 密码 # 修改 root 密码 passwd 22.10、安装引导程序 22.10.1、安装 cpu微码和引导软件 # 如果是amd的cpu 则输入amd-ucode # os-prober 查找已安装的操作系统 推荐实体机上安装 pacman -S intel-ucode grub efibootmgr os-prober 22.10.2、安装grub引导 #安装grub引导 grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=ARCH 说明 grub-install：安装grub –target=x86_64-efi ：目标架构x86架构64位 efi启动方式 若不确定使用uname -a 可以查看 –efi-directory=/boot ：安装系统是 efi 分区挂载的文件目录。例如：我 efi 挂载到 /boot 目录下，这里就是 /boot，如果是 /boot/efi 目录下，那这里就要写成 /boot/efi –bootloader-id=ARCH ：ARCH 是引导的别名，甚至这一段都可以不用写 22.10.3、生成grub # 生成grub ，如果没有 /boot/grub 目录就创建。（创建目录：mkdir /boot/grub） grub-mkconfig -o /boot/grub/grub.cfg 22.11、安装软件 # 连接网络相关的包，如果安装了 networkmanager 就不需要安装 dhcpd 。如果你使用的是 dhcpcd 那就需要结合 iwd 来使用 wifi，networkmanager 不需要 iwd。 dhcpcd iwd networkmanager # 命令补全工具 bash-completion # 网络工具 iproute2 # z","date":"2023年06月16日 23:29:46","objectID":"/posts/arch/arch-basic-install/:0:0","tags":["linux","arch"],"title":"arch 基础安装到日常使用与美化 - 基础系统安装","uri":"/posts/arch/arch-basic-install/"},{"categories":["博客搭建"],"content":"1、hugo 安装 1.1、windows 1.1.1、hugo 下载地址：https://github.com/gohugoio/hugo/releases 下载二进制文件（官方推荐下载扩展版），解压到一个目录，并配置 hugo 的环境变量。 注意：使用 hugo 一定要配置好 git 和 go 的环境 配置环境变量 右键此电脑，打开属性 在关于页面中往下拉，找到 高级系统设置 ，并打开。 打开环境变量 双击打开 点击新建，并把 hugo 解压的目录添加进去 运行 hugo version，看是否配置成功 1.1.2、git 下载地址：https://git-scm.com/download/win 根据自己的操作系统下载对应的安装包 安装程序包，无脑安装点下一步就行 1.1.3、go 下载地址：https://go.dev/dl/ 这个也是和 git 安装一样，无脑安装点下一步。 1.2、linux 我是使用的 Arch Linux 系统，可以直接使用 sudo pacman -S hugo 来下载。使用命令下载安装的就是扩展版的。 其他 linux 操作系统，可以使用和 windows 的安装方法一样。 配置环境变量 # 编辑 /etc/profile 文件 export PATH=hugo文件解压路径:$PATH # 加载 profile source /etc/profile 注意： linux 下的 path 变量使用英文冒号 2、创建一个博客 2.1、创建网站 # 创建一个博客目录 hugo new site blog cd my_website 2.2、安装主题 git init git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt 2.3、添加一个博客文章 hugo new thumbnail/first_post.md 注意：默认情况下，所有文章和页面均作为草稿创建。如果想要渲染这些页面，请从元数据中删除属性 draft: true, 设置属性 draft: false 或者在以下步骤中为 hugo 命令添加 -D 或 --buildDrafts 参数。 2.4、启动 hugo server # -e :指定使用那个环境 。development：测试环境，production：生产环境 hugo server -e production 注意： 由于 ixIt 使用了 Hugo 中的 .Scratch 来实现一些特性， 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面。 3、博客内容管理 参考文章：https://fixit.lruihao.cn/zh-cn/documentation/content-management/introduction/ 注意 ： featured-image-preview : 表示首页文章的缩略图 resources : 里面属性使用的是相对路径，优先级比较低 4、github action 自动化部署 官方地址方法：https://gohugo.io/hosting-and-deployment/hosting-on-github/ 创建一个保存原文件的仓库和一个 用户名.github.io 的仓库 在源文件仓库中创建 .github/workflows 目录，并在目录下创建 hugo.yaml 文件。内容如下 name: github pages # push 到 main 分支触发 on: push: branches: - main jobs: deploy: # 运行的环境 runs-on: ubuntu-latest env: HUGO_VERSION: 0.115.1 steps: # 安装 hugo 程序 - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026\u0026 sudo dpkg -i ${{ runner.temp }}/hugo.deb # 拉取源仓库代码 - name: Checkout uses: actions/checkout@v3 with: # 可选值 recursive 和 true submodules: recursive # 默认为 1。1：拉取最后一次提交，0：全部拉取 fetch-depth: 0 # 禁用中文转义 - name: Disable quotePath run: git config --global core.quotePath false # 构建 hugo 静态博客 - name: Build Hugo Static Blog env: HUGO_ENVIRONMENT: production HUGO_ENV: production run: hugo --gc --minify # 把 public 目录下的文件推送到 roukaixin.github.io 仓库 - name: Deploy Hugo uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} external_repository: roukaixin/roukaixin.github.io publish_branch: main publish_dir: ./public commit_message: ${{ github.event.head_commit.message }} 注意：Disable quotePath 这个过程不一定需要加上，如果你的博客文件名有中文时一定需要加入，所以一般加上比较保险 创建一个 ssh 密钥。ssh-keygen -t rsa -C 'a3427173515@163.com' -f ~/.ssh/hugo_id_rsa 在 用户名.github.io 仓库的设置的 Deploy keys 设置公钥。 在源文件仓库的设置里的 secrets 设置私钥。注意：私钥的名字一定要是 ACTIONS_DEPLOY_KEY。 5、已 git 提交时间作为文章的更新时间 需要在 hugo 的配置文件中加入下面内容的配置 # 时间配置 frontmatter: # 更新时间 lastmod: - :git - lastmod - :fileModTime # 开启 git info enableGitInfo: true ","date":"2023年06月13日 19:10:46","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:0:0","tags":["hugo","博客搭建"],"title":"hugo-博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]