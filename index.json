[{"categories":["linux"],"content":"fedora","date":"2023-07-14 19:13:00","objectID":"/fedora-linux/","tags":["linux"],"title":"fedora Linux 安装","uri":"/fedora-linux/"},{"categories":["linux"],"content":"安装 下载iso 镜像 下载地址：https://mirrors.tuna.tsinghua.edu.cn/ 下载带有 Everything 的镜像文件，这个镜像文件可以自定义安装。 安装 创建启动u盘，可视化安装教程。这里我安装的是最小化安装，因为我使用的是dwm窗口管理器 安装配置 ","date":"2023-07-14 19:13:00","objectID":"/fedora-linux/:0:0","tags":["linux"],"title":"fedora Linux 安装","uri":"/fedora-linux/"},{"categories":["linux"],"content":"替换为国内源 sudo sed -e 's|^metalink=|#metalink=|g' \\ -e 's|^#baseurl=http://download.example/pub/fedora/linux|baseurl=https://mirrors.tuna.tsinghua.edu.cn/fedora|g' \\ -i.bak \\ /etc/yum.repos.d/fedora.repo \\ /etc/yum.repos.d/fedora-modular.repo \\ /etc/yum.repos.d/fedora-updates.repo \\ /etc/yum.repos.d/fedora-updates-modular.repo # 更新本地缓存 sudo dnf makecache # 更新软件 sudo dnf -y update ","date":"2023-07-14 19:13:00","objectID":"/fedora-linux/:1:0","tags":["linux"],"title":"fedora Linux 安装","uri":"/fedora-linux/"},{"categories":["linux"],"content":"创建一个普通用户 #新建用户名arch 可自行更改用户名 useradd -m -G wheel -s /bin/bash arch #设置arch用户名的密码 passwd arch #编辑arch用户的权限 EDITOR=vim visudo 找到 # %wheel ALL=(ALL:ALL)ALL 并把 # 号去掉 个人是注释掉 %wheel ALL=(ALL:ALL)ALL 这一行，如果不想使用 sudo 命令时输入密码，可以注释掉 %wheel ALL=(ALL:ALL) NOPASSWD: ALL。两个选择一个注释掉既可以了 ","date":"2023-07-14 19:13:00","objectID":"/fedora-linux/:2:0","tags":["linux"],"title":"fedora Linux 安装","uri":"/fedora-linux/"},{"categories":["linux"],"content":"配置窗口管理器 xorg 服务器 # 安装依赖包 sudo dnf xorg-x11-server-devel xorg-x11-xinit xorg-x11-server-Xorg # 可选 xorg-x11-server-Xvfb xorg-x11-xauth xorg-x11-server-Xvfb xorg-x11-server-Xdmx xorg-x11-server-Xephyr xorg-x11-server-Xnest 在家目录下新建 .xinitrc 文件，并加入下面内容 #!/bin/bash exec dwm dwm # 安装依赖包 sudo dnf cmake gcc libX11-devel libXft-devel libXinerama-devel git # 克隆 dwm cd ~ \u0026\u0026 mkdir wm git clone https://github.com/roukaixin/yaocccc-dwm # 编译 sudo make clean install st # 克隆 st git clone https://gitee.com/rouxin/st # 编译 sudo make clean install picom # 安装依赖包 sudo dnf install meson libev-devel xcb-util-renderutil-devel xcb-util-image-devel pixman-devel xcb-util-devel uthash-devel libconfig-devel mesa-libGL-devel dbus-devel # 克隆pciom git clone https://github.com/FT-Labs/picom # 编译 cd picom git submodule update --init --recursive meson setup --buildtype=release . build ninja -C build ninja -C build install 其他工具包 sudo dnf install network-manager-applet flameshot dunst feh neofetch neovim acpi xsetroot 安装字体 下载地址：https://github.com/ryanoasis/nerd-fonts/releases/ 下载需要的字体，本人使用 dwm 的字体为：JetBrainsMono.zip，下载地址为：https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip # 创建目录 sudo mkdir /usr/share/fonts/JetBrainsMono/ # 复制文件到 /usr/share/fonts/JetBrainsMono/ 目录下 cp JetBrainsMono.tar.xz /usr/share/fonts/JetBrainsMono/ # 解压，如果没有 unzip 命令，使用 sudo dnf install unzip 安装 cd /usr/share/fonts/JetBrainsMono/ \u0026\u0026 sudo unzip JetBrainsMono.zip # 删除 sudo rm -rf JetBrainsMono.zip ","date":"2023-07-14 19:13:00","objectID":"/fedora-linux/:3:0","tags":["linux"],"title":"fedora Linux 安装","uri":"/fedora-linux/"},{"categories":["linux"],"content":"安装n卡驱动 安装成功系统后，引导的时候需要开启第三方软件库 sudo dnf install akmod-nvidia ","date":"2023-07-14 19:13:00","objectID":"/fedora-linux/:4:0","tags":["linux"],"title":"fedora Linux 安装","uri":"/fedora-linux/"},{"categories":["linux"],"content":"安装docker # 卸载之前安装的docker sudo dnf remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-selinux \\ docker-engine-selinux \\ docker-engine # 安装存储库 sudo dnf -y install dnf-plugins-core sudo dnf config-manager \\ --add-repo \\ https://download.docker.com/linux/fedora/docker-ce.repo sudo sed -i 's+https://download.docker.com+https://mirrors.tuna.tsinghua.edu.cn/docker-ce+' /etc/yum.repos.d/docker-ce.repo # 安装 docker 引擎 sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin ","date":"2023-07-14 19:13:00","objectID":"/fedora-linux/:5:0","tags":["linux"],"title":"fedora Linux 安装","uri":"/fedora-linux/"},{"categories":["linux"],"content":"安装typora # 这个可能用不了了 sudo dnf config-manager --add-repo https://typora.io/linux/Typora-fedora.repo sudo dnf install typora sudo dnf install flatpak flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo flatpak install flathub io.typora.Typora ","date":"2023-07-14 19:13:00","objectID":"/fedora-linux/:6:0","tags":["linux"],"title":"fedora Linux 安装","uri":"/fedora-linux/"},{"categories":["linux"],"content":"安装浏览器 google chrome # 下载 wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm # 安装（推荐使用 dnf，会下载依赖库） sudo dnf install ./google-chrome-stable_current_x86_64.rpm edge # 导入GPG密钥 sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc # 添加存储库 sudo dnf config-manager --add-repo https://packages.microsoft.com/yumrepos/edge # 安装 sudo dnf install microsoft-edge-stable ","date":"2023-07-14 19:13:00","objectID":"/fedora-linux/:7:0","tags":["linux"],"title":"fedora Linux 安装","uri":"/fedora-linux/"},{"categories":["linux"],"content":"下载镜像 dbus-1-devel libGLC-devel libev-devel xcb-util-renderutil-devel xcb-util-image-devel libpixman-1-0-devel xcb-util-devel uthash-devel libconfig-devel pcre2-devel ","date":"2023-07-12 20:00:00","objectID":"/opensuse/:0:0","tags":["linux"],"title":"openSUSE 安装和窗口管理器安装","uri":"/opensuse/"},{"categories":["neovim","vim"],"content":"安装 github 地址：https://github.com/neovim/neovim ","date":"2023-07-01 23:45:46","objectID":"/neovim/:0:0","tags":["neovim","vim"],"title":"neovim","uri":"/neovim/"},{"categories":["neovim","vim"],"content":"arch sudo pacman -S neovim ","date":"2023-07-01 23:45:46","objectID":"/neovim/:1:0","tags":["neovim","vim"],"title":"neovim","uri":"/neovim/"},{"categories":["linux"],"content":"archlinux的基本安装 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:0:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"停止reflector服务 禁止自动更新服务器列表 systemctl stop reflector.service ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:1:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"检查电脑是否支持UEFI引导模式 ls /sys/firmware/efi/efivars # 提示：如果没有报错就是支持UEFI ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:2:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"连接网络 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:3:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"有线连接 直接插上网线就可以自动联网了 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:3:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"无线网络（wifi） #是否启用了网络接口 ip link #执行iwctl命令，进入交互式命令行 iwctl #列出设备名，比如无线网卡看到叫 wlan0 device list #用wlan0网卡扫描网络 station wlan0 scan #列出网络 station wlan0 get-networks #连接网络名字 输入密码 station wlan0 connect 无线网名字 #成功后退出 exit或者quit 连接成功后ping一下百度是否有网 ping baidu.com ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:3:2","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"同步时间 #同步网络时间 timedatectl set-ntp true #提示：检查是否成功 看到（system clock synchronized :yes）这一句就是成功了 timedatectl status . ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:4:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"修改软件源 打中国的源放在头部 vim /etc/pacman.d/mirrorlist 33 dd : 剪切33行 p : 粘贴 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:5:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"分区 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:6:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"fdisk分区 #查看磁盘分区 lsblk #分区 fdisk /dev/sda ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:6:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"cfdisk分区 cfdisk /dev/sda 现在使用 cfdisk 分区有主分区和扩展分区，如果超过==4== 个主分区，那么就需要在扩展分区上进行分区。 例子：2G扩展分区（1G的 /boot 分区，1G 的 /boot/efi 分区），16G主分区（swap 交换分区），500G主分区 （ /home 分区），482G主分区（ 根分区） 一般分区都有跟分区（/）、交换分区（swap）、引导分区（boot） ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:6:2","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"格式化分区 EFI分区 mkfs.vfat /dev/sda1 或者mkfs.fat -F32 /dev/sda1 swap分区 mkswap /dev/sda2 普通分区 mkfs.ext4 /dev/sda3 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:6:3","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"挂载分区 根据自己的分区情况进行挂载分区（尽量不要把usr目录挂载出去，如果挂载出去是不能开机的（网上也有教程是可以挂载的，我没有试过）），一般挂载第三方应用安装目录（opt）、临时文件目录（tmp） #挂载 #必须先挂载根目录 才能挂载其他目录 mount /dev/sda3 /mnt swapon /dev/sda2 请用swap分区 mkdir /mnt/boot mount /dev/sda1 /mnt/boot ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:7:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"安装内核 #往/mnt目录里安装系统 #其中最基础的四个包是base base-devel linux linux-firmware #linux-lts （lts:稳定版） # 如果内核安装了稳定版，那么独显也要是稳定版的，要不然就会发生问题（我也不知道什么问题） pacstrap /mnt base base-devel linux linux-firmware vim ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:8:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"配置系统 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:9:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"Fstab # 生成 fstab文件 (用 `-U` 或 `-L` 选项设置 UUID 或卷标) genfstab -U /mnt \u003e\u003e /mnt/etc/fstab **强烈建议：**在执行完以上命令后，检查一下生成的 /mnt/etc/fstab 文件是否正确。 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:9:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"Chroot # chroot到新安装的系统 arch-chroot /mnt ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:9:2","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"设置时区 # ln -sf /usr/share/zoneinfo/Region（地区名）/City（城市名） /etc/localtime # 设置上海时区 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 将硬件时钟调整为与目前的系统时钟一致 hwclock --systohc ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:9:3","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"本地化 修改 local.gen 文件 程序和库如果需要本地化文本，都依赖区域设置，后者明确规定了地域、货币、时区日期的格式、字符排列方式和其他本地化标准。 需在这两个文件设置：locale.gen 与 locale.conf。 编辑 /etc/locale.gen，然后取消掉 en_US.UTF-8 UTF-8 和其他需要的 区域设置前的注释#。 接着执行 locale-gen 以生成 locale 信息： vim /etc/locale.gen # 更新locale locale-gen 创建 locale.conf 文件 创建 locale.conf 文件，并编辑设定 LANG 变量，比如： vim /etc/locale.conf LANG=en_US.UTF-8 警告： 不推荐在此设置任何中文 locale，会导致 tty 乱码。 例子： en_US.UTF-8 UTF-8 zh_CN.UTF-8 UTF-8 zh_SG.UTF-8 UTF-8 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:9:4","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"网络配置 创建hostname文件 # 编辑 hostname，写入下面内容 vim /etc/hostname # 写入内容 arch（主机名） 创建hosts文件 # 编辑 hosts，写入下面内容 vim /etc/hosts # 写入内容 127.0.0.1 localhost ::1 localhost ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:9:5","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"Root 密码 # 修改 root 密码 passwd ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:9:6","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"安装引导程序 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:10:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"安装 cpu微码和引导软件 pacman -S intel-ucode grub efibootmgr os-prober # 如果是intel的cpu 则输入amd-ucode # os-prober查找已安装的操作系统 推荐实体机上安装 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:10:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"安装grub引导 #安装grub引导 grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=ARCH 说明 grub-install：安装grub –target=x86_64-efi ：目标架构x86架构64位 efi启动方式 若不确定使用uname -a 可以查看 –efi-directory=/boot ：安装系统是 efi 分区挂载的文件目录。例如：我 efi 挂载到 /boot 目录下，这里就是 /boot，如果是 /boot/efi 目录下，那这里就要写成 /boot/efi –bootloader-id=ARCH ：ARCH 是引导的别名，甚至这一段都可以不用写 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:10:2","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"生成grub # 生成grub ，如果没有 /boot/grub 目录就创建。（创建目录：mkdir /boot/grub） grub-mkconfig -o /boot/grub/grub.cfg ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:10:3","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"安装软件 # 连接网络相关的包，如果安装了 networkmanager 就不需要安装 dhcpd 。如果你使用的是 dhcpcd 那就需要结合 iwd 来使用 wifi，networkmanager 不需要 iwd。 dhcpcd iwd networkmanager # sudo # 命令补全工具 bash-completion # 网络工具 iproute2 # zsh # 查看系统信息命令 neofetch # 安装 pacman -S networkmanager sudo neofetch # 开机自启动网络管理。如果安装的是 dhcpd ，执行 systemctl enable dhcpcd systemctl enable NetworkManager ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:11:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"退出 #输入 exit 或按 Ctrl+d 退出 chroot 环境。 exit #卸载被挂载的分区 umount -R /mnt #重启 reboot 安装后的配置 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:12:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"配置中国源和开启32位软件包 # 编辑 /etc/pacman.d/mirrorlist，如果在安装系统时，关闭了 reflector 服务和配置了 mirrorlist，那么这个可以不用改，为了保险起见，还是需要看一下和安装的时候有没有区别。 vim /etc/pacman.d/mirrorlist # 清华源 Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch # 中科大源 Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch # 在头部添加阿里源 Server = http://mirrors.aliyun.com/archlinux/$repo/os/$arch # 163源 （i686 和 x86_64） Server = http://mirrors.163.com/archlinux/$repo/os/i686 ################ 开启32位软件包 ################ # 编辑 /etc/pacman.conf vim /etc/pacman.conf # 下面两行内容取消掉 # 号 [multilib] Include = /etc/pacman.d/mirrorlist # 在最后面添加 [archlinuxcn] Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch Server = https://mirrors.aliyun.com/archlinuxcn/$arch # 更新软件包缓存 pacman -Syy # 安装 GPG key pacman -S archlinuxcn-keyring ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:13:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"添加一个普通用户 #新建用户名arch 可自行更改用户名 useradd -m -G wheel -s /bin/bash arch #设置arch用户名的密码 passwd arch #编辑arch用户的权限 EDITOR=vim visudo 找到 # %wheel ALL=(ALL:ALL)ALL 并把 # 号去掉 个人是注释掉 %wheel ALL=(ALL:ALL)ALL 这一行，如果不想使用 sudo 命令时输入密码，可以注释掉 %wheel ALL=(ALL:ALL) NOPASSWD: ALL。两个选择一个注释掉既可以了 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:14:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"安装软件源（AUR） # 可以选择两个都安装，也可以只安装一个 pacman -S yay paru ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:15:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"安装字体 # ttf-dejavu : 英文字体 # wqy-zenhei : 文泉驿正黑矢量字体 # wqy-microhei : 文泉驿-微米黑 # noto-fonts-emoji : Emoji 字体 # ttf-jetbrains-mono-nerd : pacman -S ttf-dejavu wqy-zenhei wqy-microhei noto-fonts-emoji ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:16:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"安装中文输入法 安装 fcitx5 # fcitx5-im : 基础包和模块 # fcitx5-chinese-addons ：中文输入法引擎 # # 输入法模块 1、qt程序：fcitx5-qt 2、gtk程序 ： fcitx5-gtk pacman -S fcitx5-im fcitx5-chinese-addons 配置输入法 # 编辑 /etc/environment，加入下面内容 vim /etc/environment # 内容 GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx XMODIFIERS=@im=fcitx SDL_IM_MODULE=fcitx GLFW_IM_MODULE=ibus 安装词库 # 安装词库 # fcitx5-pinyin-zhwiki : 中文维基百科创建的词库 pacman -S fcitx5-pinyin-zhwiki fcitx5-pinyin-moegirl 全部配置完成之后重启一下电脑，使用普通用户登录，在进行下面操作 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:17:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"安装工具（可选） # udisk2 udiskie : 自动挂载U盘修改 # ntfs-3g ： 读取ntfs格式磁盘 # dolphin : 文件管理器 # thunar : 文件管理器 pacman -S udisks2 udiskie ntfs-3g dolphin # 开机自启自动挂载U盘 systemctl enable udisks2 显卡驱动 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:18:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"安装 NVIDIA 驱动 安装驱动 安装启动之前，先跟新一下 pacman 数据库。更新命令：sudo pacman -Syyu # 安装 linux-lts-headers，因为显卡启动需要。 # 注意：如果内核是 linux ，不是 linux-lts，那么安装的是 linux-headers sudo pacman -S linux-lts-headers # 安装 nvidia 启动，推荐安装 nvidia-dkms ，他是动态安装的。不像其他驱动，如果内核升级，就需要重新安装一次驱动。 sudo pacman -S nvidia-dkms 安装完成驱动之后重启电脑 DRM 内核模式设置 这一步可以解决屏幕撕裂问题 # 编辑修改 /etc/default/grub vim /etc/default/grub # 找到 GRUB_CMDLINE_LINUX_DEFAULT 这一项在后面加入 nvidia-drm.modeset=1 编辑完成之后，重新生成 grub.cfg ，执行 sudo grub-mkconfig -o /boot/grub/grub.cfg 添加 initramfs 模块 在 /etc/mkinitcpio.conf 中找到 MODULES= 这一行在括号的后面加入nvidia nvidia_modeset nvidia_uvm nvidia_drm。修改之前先备份一下（sudo cp /etc/mkinitcpio.conf /etc/mkinitcpio.conf.back） 重新生成 initramfs 。生成命令：sudo mkinitcpio -P 校验是否安装成功 打开终端，输入 nvidia-smi 命令，出现 NVIDIA-SMI has failed because it couldn't communicate with the NIVIDIA driver. Make sure that the latest NVIDIA driver is installed and running ，那就说明没有安装成功。 解决方案：重启电脑，如果重启电脑还是不行，那就重新按 4.1 在安装一遍启动。还是不行的话，就多试试几次 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:19:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"仅使用 NVIDIA 显卡 下面配置针对于 x 服务器，并使用桌面环境（dwm） 创建 xorg.conf（10-nvidia-drm-outputclass.conf） 在 /etc/X11/xorg.conf.d/ 目录下新建 10-nvidia-drm-outputclass.conf。 **重要：**如果/etc/X11存在xorg.conf，那么一定要删除掉 在/usr/share/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf也有一份是生成的，可以参考着来看 vim /etc/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf Section \"OutputClass\" Identifier \"intel\" MatchDriver \"i915\" Driver \"modesetting\" EndSection Section \"OutputClass\" Identifier \"nvidia\" MatchDriver \"nvidia-drm\" Driver \"nvidia\" Option \"AllowEmptyInitialConfiguration\" Option \"PrimaryGPU\" \"yes\" ModulePath \"/usr/lib/nvidia/xorg\" ModulePath \"/usr/lib/xorg/modules\" EndSection **注意：**这里的 intel 驱动 必须为 modesetting，否则会产生严重的撕裂，后面的 AllowEmptyInitialConfiguration 是为了让 n 卡在没检测到显示器的时候继续运行，而不是默认的退出。 使用 startx 启动 这里以dwm为例，如果你是其他桌面管理器，请参阅这里。如果不配置你将会获得黑屏。 接下来，将以下两行添加到您的开头：~/.xinitrc # 编辑 .xinitrc 并在文件开头添加下面内容 vim ~/.xinitrc xrandr --setprovideroutputsource modesetting NVIDIA-0 xrandr --auto 如果启动之后 dpi 设置不正确，那么还需要在 xrandr --auto 下面一行加入 xrandr --dpi 96 安装 NVIDIA 软件包 （可选） sudo pacman -S nvidia-settings nvidia-utils 检查3D 检查是否正常使用 N 卡来输出。建议检查一下 # 安装包 sudo pacman -S mesa-utils # 检查是否输出,出现下面内容就是成功了 glxinfo | grep NVIDIA 配置视频硬解 # 安装 翻译层 paru -S libva-nvidia-driver 配置 方法一： # 创建 .xprofile 文件 vim ~/.xprofile export LIBVA_DRIVER_NAME=nvidia export LIBVA_DRIVERS_PATH=/usr/lib/dri/ export VDPAU_DRIVER=nvidia # 修改 .xinitrc 文件 [ -f ~/.xprofile ] \u0026\u0026 . ~/.xprofile 方法二： # 修改 .xinitrc 文件 export LIBVA_DRIVER_NAME=nvidia export LIBVA_DRIVERS_PATH=/usr/lib/dri/ export VDPAU_DRIVER=nvidia 注意：一定要在 exec dwm 之前 验证 VA-API # 安装软件包，如果不安装这个包，那么 vainfo 无法使用 sudo pacman -S libva-utils 验证 VA-API 是否正常工作，运行 vainfo，出现下面内容就表示成功 验证VDPAU # 安装 vdpauinfo，不安装无法使用 vdpauinfo 命令 sudo pacman -S vdpauinfo 验证 VDPAU 是否正常工作，运行vdpauinfo，出现下图就表示成功 声卡驱动 sudo pacman -S pipewire sudo pacman -S lib32-pipewire sudo pacman -S pipewire-pulse sudo pacman -S pavucontrol wm（窗口管理器） ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:19:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"dwm（窗口管理器）的安装 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:20:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"安装x窗口管理系统 # xorg ： xorg 包含 xorg-server 和 xorg-apps # xorg-xinit ： 用来启动xorg sudo pacman -S xorg xorg-xinit # 安装完xorg-xinit之后把配置文件复制到普通用户目录下 cp /etc/X11/xinit/xinitrc ~/.xinitrc ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:20:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"安装dwm全家桶 安装dwm # 下载dwm git clone https://git.suckless.org/dwm cd dwm # 编译 make # 安装 make install 安装st # 下载st （alacritty 终端） git clone https://git.suckless.org/st cd st # 编译 make # 安装 make install 安装dmenu # 下载dmenu （rofi） git clone https://git.suckless.org/dmenu cd qmenu # 编译 make # 先清除在安装 make clean install 安装slstaus # 下载安装 slstatus git clone https://git.suckless.org/slstatus cd slstatus make make clean install # 在 ~/.xinitrc 中加入 exec slstatus \u0026 。注意：一定要在 dwm 前面 启动 设置中文界面 # 在 ～/.xintrx 中加入 # 注意 ： 一定要加在 exec dwm 前 export LANG=zh_CN.UTF-8 export LANGUAGE=zh_CN:en_US 启动dwm # 编辑 .xinitrc 文件 vim ~/.xinitrc # 先把最后几行删除，在把 exec dwm 添加进去 在～/.xinitrc文件末尾添加exec dwm，并保存退出，使用startx来启动窗口管理器。 设置分辨率 # 查看分辨率 xrandr -q # 设置分辨率 # Virtual-1 : 显示器名称 # 1920x1080 ： 分辨率 # 144.00 ： 赫兹 xrandr --output Virtual-1 --mode 1920x1080 --rate 144.00 注意：如果使用xrandr -q查看的结果中没有符合自己显示的分辨率就需要自己创建一个 # 创建一个分辨率 cvt 1920 1080 144 xrandr --newmode .... # 添加到显示器上 xrandr --addmode 显示器名称 \"1920x1080_144.00\" # 修改分辨率 xrandr --output 显示器名称 --mode '分辨率' picom合成器 # 安装 picom 、picom-ibhagwan-git(毛玻璃效果)、picom-ftlabs-git（动画效果很好） paru -S picom-ftlabs-git # 虚拟机下要是 picom 生效要进行配置需要注释掉 vsync= true # ~/.config/picom/picom.conf mkdir ~/.config/picom # 如果没有 pciom.conf ，那么就看看有没有 picom.conf.example cp /etc/xdg/picom.conf ~/.config/picom/picom.conf vim /etc/xdg/picom.conf # 启动 dwm 启动 picom # -b: 以后台进程（Daemon）的形式运行 # -c: 启用阴影效果 # -C: 禁用面板和 Docks 的阴影效果 # -G: 禁用应用程序窗口和拖放对象的阴影效果 # --config: 使用指定的配置文件 vim ~/.xinitrc picom --config ~/wm/config/picom/picom.conf # 添加在 exec dwm 之前 注意： 基本都是把全局的配置文件负责到当前用户下的.config/picom目录下。命令：cp /etc/xdg/picom.conf ~/.config/picom/picom.conf class_g 怎么获取： **1、下载安装 xorg-xprop ** 2、在终端里运行 xprop 命令，之后点击需要获取的 class 的窗口 排除透明度的程序 focus-exclude = [ \"class_g = 'fcitx'\" ] # 表示排除选中的透明度 opacity-rule = [ \"100:class_g = 'fcitx'\" ] # 表示 fcitx 的不透明度 # 其中 100 表示不透明度为 100% 开启圆角 # 圆角大小，值大于0 corner-radius = 10 # 排除圆角程序 rounded-corners-exclude = [ \"class_g = 'fcitx'\" ] 我的配置文件地址：https://gitee.com/rouxin/config 系统优化 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:20:2","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"提升开机速度 # 事后可设置 /etc/default/grub 中 可提升启动速度 GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3 nowatchdog\" # 重新生成 grub-mkconfig -o /boot/grub/grub.cfg ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:21:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"双系统时间不正确 windows使用 UTC 时间 # 进入 windows 系统，使用管理员运行 cmd，并运行下面命令于添加到注册表中 reg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\TimeZoneInformation\" /v RealTimeIsUniversal /d 1 /t REG_DWORD /f ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:22:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"调节亮度 方法一： 默认亮度：24000 查看最大亮度 cat /sys/class/backlight/intel_backlight/max_brightness 修改亮度值 sudo vim /sys/class/backlight/intel_backlight/brightness 方法二： # 安装 brightnessctl 包 sudo pacman -S brightnessctl 在 dwm 的 config.h 中加入 static const char *brighter[] = { \"brightnessctl\", \"set\", \"10%+\", NULL }; static const char *dimmer[] = { \"brightnessctl\", \"set\", \"10%-\", NULL }; ... static const Key keys[] = { ... { 0, XF86XK_MonBrightnessDown, spawn, {.v = dimmer } }, { 0, XF86XK_MonBrightnessUp, spawn, {.v = brighter } }, ... }; ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:23:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"打补丁方法 进行下面操作之前需要配置好 git # 下载 git ，推荐使用git打补丁，可以进行回退配置 # kdiff3 : 对比 git 冲突的图形化页面 pacman -S git kdiff3 # 配置用户名和邮箱 git config --global user.name roukaixin git config --global user.email \"a3427173515@163.com\" # 设置全局查看分支冲突软件 git config --global merge.tool kdiff3 方法一 下载补丁 git 操作 # 查看当前在那个分支 git branch # 创建一个分支 config : 分支名 git branch config # 切换分支 git checkout config # 添加文件 git add 文件名 # commit git commit -m 描述信息 # 融合分支 config :分支ming 123：描述信息 git merge config -m 123 # 清除到原始的状态 make clean \u0026\u0026 rm -rf config.h \u0026\u0026 git reset --hard origin/master # 打补丁的命令 # -F 0 取消模糊匹配 patch -F 0 补丁名字 # 打补丁失败的是生成一个 .dej 为结尾的文件，要自己手动去决定 vim .rej # 打开一个vim的tab栏 :tabnew # 打开（文件） :e 文件名 在.rej 文件里，前端有 + 号的就是表示要加进去，- 号就表示删除掉 注意：函数的函数名不要删除掉 方法二 下载补丁，然后自己手动去复制粘贴到源代码里面 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:24:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"dwm 进行到这一步的时候，因为之前已经编译了 dwm ，所以先重置回到官方的版本。命令：make clean \u0026\u0026 rm -rf config.h \u0026\u0026 git reset --hard origin/master # 创建一个本地 sockless 分支 git branch sockless # 删除官方的仓库地址并重新添加，下图第一个 git remote -v git remote remove origin git remote add sockless https://git.suckless.org/dwm # 添加自己的仓库地址（这里使用的是两个仓库，分别是 gitee，github。自己根据需要来执行操作） git remote add gitee git@gitee.com:rouxin/dwm.git git remote add github git@github.com:roukaixin/dwm.git # 出现下面第二张图说明就成功了 把官方的 dwm 源码分别提交到 gitee 和 github 仓库 # 切换到 sockless 本地分支 git checkout sockless # 分别提交到 gitee 和 github 仓库的 sockless 分支 git push gitee sockless:sockless git push github sockless:sockless # 切换会 master 分支 git checkout master # 提交到主分支 git push gitee master:master git push github master:main 这些操作只是为了到时候升级dwm的官方版本比较方便，直接在 sockless 分支拉取最新的代码就可以了，之后在到 主分支和并 sockless 分支。 # 拉取 git pull sockless master:sockless # 在主分支上合并 sockless 分支 git merge sockless -m \"更新 dwm 官方代码\" ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:25:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"dwn推荐的补丁 窗口全屏（actualfullscreen） 透明补丁（alpha） 浮动布局，打开窗口位置居中（alwayscenter） 打开新窗口是在底部（attachbottom） 自启动脚本（autostart） 状态栏显示多个窗口信息（awesomebar） dwm 的 bar 高度（bar height） 屏幕和状态栏的间隙（barpadding） 网格布局（gridmode） 隐藏空的 tag （hide vacant tags） 移动窗口补丁 （movethrow） 每个 tags 都是独立的布局（pertag） 临时小窗口（scratchpad） 状态栏托盘（systray） 移动窗口到其他 tag ，跟随过去（viewontag） 窗口间距（vanitygaps） 其他补丁可以参考https://toscode.gitee.com/xiexie1993/dwm git 仓库 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:25:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"布局图标 # 地址 https://www.nerdfonts.com/ # 网格布局图标 nf-md-view_grid # 平铺布局图标 nf-md-collage ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:25:2","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"修改关键的键为win键 cd dwm vim config.h #修改 #define MDDKEY MOD4Msk ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:25:3","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"设置中英文字体大小相同 # 安装矢量图标 pacman -S ttf-nerd-fonts-symbols-2048-em # 进入dwm目录下编写 config.h 文件 cd dwm vim config.h # 查看文泉驿字体 fc-list |grep WenQuanYi # 在config.h中添加配置 # antialias autohint : 抗锯齿 “WenQuanYi Micro Hei:size=10:type=Regular:antialias=true:autohint=true” # 查看矢量图标 fc-list |grep Nerd “Symbols Nerd Font:pixelsize=14:type=2048-em:antialias=true:autohint=true” ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:25:4","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"设置tag图标 # 图标网址 https://www.nerdfonts.com/cheat-sheet # terminal 终端 # google 浏览器 # java java编程 # markdown 笔记 # folder 文件管理 # office 文档 # music 音乐 # steam 游戏 # cube 虚拟机 # video 录屏 # 设置完成后重新编译安装 make \u0026\u0026 sudo make clean install ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:25:5","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"设置状态栏 使用音量要安装alsa-utils包 ：pacman -S alsa-utils # ==============图标==================# # 启动版本号 archlinux # 硬盘 disk # cpu memory # 内存 nf-mdi-chip nf-fa-microchip # 上传网速 nf-mdi-arrow_up_bold # 下载网速 nf-mdi-arrow_down_bold # 音量 volume # 麦克风 microphone # 时间 time #=====================================# #==================命令===================# 如图片 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:25:6","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"设置快捷键 设置音量快捷键 # 切换音量状态（静音、非静音） amixer sset Master toggle # 最小步长是3,设置5一下都是以3个音量增加或减少 # 减少音量 amixer sset Master 5%- unmute # 增大音量 amixer sset Master 5%+ unmute # 进入 dwm 的目录 cd dwm # 创建存放脚本的目录 mkdir script # 进入 script 目录 cd script # 编写加音量的脚本 vim volup.sh #! /bin/bash amixer sset Master 3%+ unmute # 编写减音量的脚本 vim voldown.sh #! /bin/bash amixer sset Master 3%- unmute # 编写切换音量状态的脚本 vim voltoggle.sh #! /bin/bash amixer sset Master toggle # 编写完脚本之后给脚本可执行的权限 chmod +x volup.sh voldown.sh voltoggle.sh # 注意 ： 把 script 目录归到普通用户组 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:25:7","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"st ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:26:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"st推荐补丁 终端半透明（alpha） 去除终端的白边（anysize） 打开多个终端就会出项这个问题 终端中的输入下划线（blinking_cursor） 闪动的下划线 主题颜色（xresources） 保留多个主颜色 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:26:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"修改st的字体大小 cd st vim config.h #修改 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:26:2","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"dmenu ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:27:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"slstaus ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:28:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"设置背景图片 # feh 图形工具 pacman -S feh # 设置壁纸 # --bg-fill : 全屏显示 # --randomize ：随即显示 feh --bg-fill --randomize ~/wallpaper/*.png(壁纸路径) # 设置启动 dwm 应用壁纸 vim ~/.xinitrc feh --bg-fill --randomize ~/wallpaper/*.png(壁纸路径) # 刷新背景图片 while feh --bg-fill --randomize ~/wallpaper/*.png(壁纸路径) do sleep 60 # 睡多少秒 done \u0026 软件安装 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:29:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"网络管理器 # 系统托盘 sudo pacman -S network-manager-applet 开启热点 # 安装 linux-wifi-hotspot paru -S linux-wifi-hotspot # 开启热点 # 第一个 wlo1 : 热点连接 # 第二个 wlo1 : 共享的网络数据 # arch ： 热点名字 # 12345678 ： 热点密码 sudo create_ap wlo1 wlo1 arch 12345678 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:30:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"截图软件 # 火焰截图 sudo pacman -S flameshot 绑定 dwm 快捷键，在 config.def.conf 中加入 { Mod1Mask, XK_a, spawn, SHCMD(\"flameshot gui\") }, //截图 （快捷键：alt + a） ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:31:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"通知守护进程 sudo pacman -S dunst # 启动 dunst -config 文件路径 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:32:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"终端文件管理器 sudo pacman -S ranger 官方文档：https://kgithub.com/ranger/ranger/wiki 其他文档配置：https://www.zssnp.top/2021/06/03/ranger/ ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:33:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"生成配置文件 ranger --copy-config=all ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:33:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"安装图标 git clone https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons echo \"default_linemode devicons\" \u003e\u003e $HOME/.config/ranger/rc.conf ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:33:2","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"预览图片 # 安装 ueberzugpp paru -S ueberzugpp # 修改配置。～/.config/ranger/rc.conf set preview_images false 改为 set preview_images true set preview_images_method w3m 改为 set preview_images_method ueberzug ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:33:3","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"预览视频 # 安装 ffmpegthumbnailer sudo pacman -S ffmpegthumbnailer # 修改配置文件。～/.config/ranger/scope.sh 取消掉 video 的注释 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:33:4","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"代码高亮 sudo pacman -S highlight ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:33:5","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"压缩包预览 sudo pacman -S atool ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:33:6","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"文档软件 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:34:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"wps paru -S wps-office paru -S ttf-wps-fonts paru -S wps-office-mui-zh-cn ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:34:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"代理 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:35:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"clash 下载配置文件 wget -o confing.yaml 订阅地址\u0026flag=clash docker compose version: \"3.8\" services: clash: image: ghcr.io/dreamacro/clash restart: always volumes: - /posts/config/config.yaml:/root/.config/clash/config.yaml:ro dns: - 114.114.114.114 ports: - \"7890:7890\" - \"7891:7891\" - \"9090:9090\" # The External Controller (RESTful API) network_mode: \"bridge\" 终端代理 sudo pacman -S proxychains-ng 修改配置文件 sudo vim /etc/proxychains.conf # 在最后修改为 socks5 127.0.0.1 7891 googe 使用代理 # google-chrome-stable： 谷歌的命理 # 127.0.0.1 ： 代理的服务器，7890 ： http 代理的端口 google-chrome-stable --proxy-server=127.0.0.1:7890 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:35:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"文件管理器 # thunar # pcmanfm sudo pacman -S thunar ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:36:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"音乐播放器 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:37:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"qq音乐 paru -S qqmusic-bin ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:37:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"listen1 地址：https://github.com/listen1/listen1_desktop 这里我选择的是 AppImage 格式，如果想在 rofi 中可以打开，那么要先给这个文件可执行的权限，并把他软链接到 /usr/local/bin 目录下。 注意：一定要使用绝对路径，要不然找不到文件 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:37:2","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"聊天软件 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:38:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"纸飞机 sudo pacman -S telegram-desktop ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:38:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"qq paru -S linuxqq ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:38:2","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"微信 paru -S com.qq.weixin.deepin # 启动命令路径 /opt/apps/com.qq.weixin.deepin/files/run.sh # 软连接到 /usr/local/bin ln -sf /opt/apps/com.qq.weixin.deepin/files/run.sh /usr/local/bin/weixin 注意：如果使用有那些框框，可以试着改一下启动命令的一些东西，本人使用 deepin-wine5 是比较好用的，还有一些 wine 的容器（这个需要自己去了解） ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:38:3","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"笔记软件 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:39:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"typora sudo pacman -S typora ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:39:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"录屏软件 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:40:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"obs sudo pacman -S obs-studio ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:40:1","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["linux"],"content":"redis 可视化 paru -S redisinsight 官方地址 https://redis.com/redis-enterprise/redis-insight/ # 下载 appimager，给他赋予可执行权限，并把它软拦截到 /usr/local/bin 目录下 ","date":"2023-06-16 23:29:46","objectID":"/arch-linux/:41:0","tags":["linux"],"title":"Arch Linux 安装到美化","uri":"/arch-linux/"},{"categories":["博客搭建"],"content":"hugo 安装 ","date":"2023-06-13 19:10:46","objectID":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:0:0","tags":["hugo"],"title":"hugo 博客搭建","uri":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客搭建"],"content":"windows ","date":"2023-06-13 19:10:46","objectID":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:1:0","tags":["hugo"],"title":"hugo 博客搭建","uri":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客搭建"],"content":"hugo 下载地址：https://github.com/gohugoio/hugo/releases 下载二进制文件（官方推荐下载扩展版），解压到一个目录，并配置 hugo 的环境变量。 image-20230613191605156\r注意：使用 hugo 一定要配置好 git 和 go 的环境 配置环境变量 右键此电脑，打开属性 image-20230613214806614\r在关于页面中往下拉，找到 高级系统设置 ，并打开。 image-20230613215315561\r打开环境变量 image-20230613220819155\r双击打开 image-20230613220855745\r点击新建，并把 hugo 解压的目录添加进去 image-20230613220953657\r运行 hugo version，看是否配置成功 image-20230613221146810\r","date":"2023-06-13 19:10:46","objectID":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:1:1","tags":["hugo"],"title":"hugo 博客搭建","uri":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客搭建"],"content":"git 下载地址：https://git-scm.com/download/win 根据自己的操作系统下载对应的安装包 image-20230613221341358\r安装程序包，无脑安装点下一步就行 ","date":"2023-06-13 19:10:46","objectID":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:1:2","tags":["hugo"],"title":"hugo 博客搭建","uri":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客搭建"],"content":"go 下载地址：https://go.dev/dl/ 这个也是和 git 安装一样，无脑安装点下一步。 ","date":"2023-06-13 19:10:46","objectID":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:1:3","tags":["hugo"],"title":"hugo 博客搭建","uri":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客搭建"],"content":"linux 我是使用的 Arch Linux 系统，可以直接使用 sudo pacman -S hugo 来下载。使用命令下载安装的就是扩展版的。 其他 linux 操作系统，可以使用和 windows 的安装方法一样。 配置环境变量 # 编辑 /etc/profile 文件 export PATH=hugo文件解压路径:$PATH # 加载 profile source /etc/profile image-20230613192442234\r注意： linux 下的 path 变量使用英文冒号 创建一个博客 ","date":"2023-06-13 19:10:46","objectID":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:2:0","tags":["hugo"],"title":"hugo 博客搭建","uri":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客搭建"],"content":"创建网站 # 创建一个博客目录 hugo new site blog cd my_website ","date":"2023-06-13 19:10:46","objectID":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:3:0","tags":["hugo"],"title":"hugo 博客搭建","uri":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客搭建"],"content":"安装主题 git init git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt ","date":"2023-06-13 19:10:46","objectID":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:4:0","tags":["hugo"],"title":"hugo 博客搭建","uri":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客搭建"],"content":"添加一个博客文章 hugo new posts/first_post.md 注意：默认情况下，所有文章和页面均作为草稿创建。如果想要渲染这些页面，请从元数据中删除属性 draft: true, 设置属性 draft: false 或者在以下步骤中为 hugo 命令添加 -D 或 --buildDrafts 参数。 ","date":"2023-06-13 19:10:46","objectID":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:0","tags":["hugo"],"title":"hugo 博客搭建","uri":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客搭建"],"content":"启动 hugo server 注意： 由于 ixIt 使用了 Hugo 中的 .Scratch 来实现一些特性， 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面。 博客内容管理 title: 文章标题 subtitle:文章副标题 date: 这篇文章创建的日期时间它通常是从文章的前置参数中的 date 字段获取的，但是也可以在 主题配置 中设置 lastmod: 上次修改内容的日期时间 draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数，这篇文章不会被渲染 author:文章作者配置，和 主题配置 中的 params.author 部分相同 author: name: \"\" # 文章作者 link: \"\" # 文章作者的链接 email: \"\" # 文章作者的邮箱，用于设置 Gravatar 头像，优先于 `author.avatar` avatar: \"\" # 文章作者的头像 authorAvatar: 是否启用文章作者头像 description: 文章内容的描述 keywords: 文章内容的关键词 license: 这篇文章特殊的许可 images: 页面图片，用于 Open Graph 和 Twitter Cards tags: 文章的标签 categories: 文章所属的类别 featuredImage: 文章的特色图片 featuredImagePreview: 用在主页预览的文章特色图片 hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上 hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中 twemoji: 如果设为 true, 这篇文章会使用 twemoji lightgallery: 和 主题配置 中的 params.page.lightgallery 部分相同 ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法 fraction: 如果设为 true, 这篇文章会使用 分数扩展语法 fontawesome: 如果设为 true, 这篇文章会使用 Font Awesome 扩展语法 linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接 rssFullText: 如果设为 true, 在 RSS 中将会显示全文内容 pageStyle: 页面样式，详见 页面宽度 toc: 和 主题配置 中的 params.page.toc 部分相同 expirationReminder: 和 主题配置 中的 params.page.expirationReminder 部分相同 code: 和 主题配置 中的 params.page.code 部分相同 edit: 和 主题配置 中的 params.page.edit 部分相同 math: 和 主题配置 中的 params.page.math 部分相同 mapbox: 和 主题配置 中的 params.page.mapbox 部分相同 share: 和 主题配置 中的 params.page.share 部分相同 comment: 和 主题配置 中的 params.page.comment 部分相同 library:和 主题配置 中的 params.page.library 部分相同 seo: 和 主题配置 中的 params.page.seo 部分相同 type: 页面渲染模板，详见 页面模板 menu: 详见 添加内容到菜单 password: 加密页面内容的密码，详见 内容加密 message: 加密提示信息，详见 内容加密 repost: 和 主题配置 中的 params.page.repost 部分相同 autoBookmark:和 主题配置 中的 params.page.autoBookmark 部分相同 wordCount: 和 主题配置 中的 params.page.wordCount 部分相同 readingTime: 和 主题配置 中的 params.page.readingTime 部分相同 endFlag: 和 主题配置 中的 params.page.endFlag 部分相同 reward: 和 主题配置 中的 params.page.reward 部分相同 instantPage: 和 主题配置 中的 params.page.instantPage 部分相同 ","date":"2023-06-13 19:10:46","objectID":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:6:0","tags":["hugo"],"title":"hugo 博客搭建","uri":"/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]